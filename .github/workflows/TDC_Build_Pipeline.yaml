name: TDC_Build_pipeline

on:
  push:
    branches:
      - main
      - dev
      
  pull_request:
    branches:
      - main
      - dev
      
  workflow_dispatch:
  
env:
    DOTNETVERSION: 8.0.x 
    
jobs:
  buildWindows:
    runs-on: windows-2022
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET SDK ${{env.DOTNETVERSION}}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '${{env.DOTNETVERSION }}'

    - name: List installed .NET info
      shell: pwsh
      run: dotnet --info
      
    - name: Install .NET MAUI Workloads
      if: runner.os == 'Windows'
      shell: bash
      run: |
        dotnet nuget locals all --clear 
        dotnet workload install maui \
            --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json \
            --source https://api.nuget.org/v3/index.json
        dotnet workload list
    
    - name: Update Workloads
      run: dotnet workload update
    
    - name: Restore dependencies
      run: dotnet restore code/TDC/TDC/TDC.csproj
      
    - name: Build and Publish Windows App 
      run: dotnet publish code/TDC/TDC/TDC.csproj -c Release -f net8.0-windows10.0.19041.0 -o ./output/windows 

  buildAndroid:
    runs-on: windows-2022
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET SDK ${{env.DOTNETVERSION}}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '${{env.DOTNETVERSION }}'

    - name: List installed .NET info
      shell: pwsh
      run: dotnet --info

    - name: Install .NET MAUI Workloads
      if: runner.os == 'Windows'
      shell: bash
      run: |
        dotnet nuget locals all --clear 
        dotnet workload install maui android wasm-tools \
            --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json \
            --source https://api.nuget.org/v3/index.json
        dotnet workload list
            
    - name: Restore nuget packages
      run: dotnet restore code/TDC/TDC.sln 
        
    - name: Build Android App
      shell: bash
      run: dotnet publish code/TDC/TDC/TDC.csproj -c:Release -f:net8.0-android -o:output/android --no-restore
    
    - name: Run tests
      run: dotnet test --no-build --configuration Release ./code/TDC/TDC.sln

  cve-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Dependency-Check benötigt Java, also stellen wir Java bereit
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Führe OWASP Dependency-Check aus
      - name: Run OWASP Dependency-Check
        uses: dependency-check/action@v2
        with:
          # Pfad zum Code; passe ggf. an, falls dein Projekt in einem Unterordner liegt
          scan: '../../../'
          # Ausgabeformate: ALL erzeugt z. B. HTML, XML und JSON Reports
          format: 'ALL'
          output-directory: dependency-check-report
